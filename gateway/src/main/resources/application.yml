# 서버 포트 설정 (gateway-deployment에서 8000번 포트를 사용)
server:
  port: 8000

# Spring Cloud Gateway 설정
spring:
  cloud:
    gateway:
      # ✅ [신규 추가] 전역 CORS(Cross-Origin Resource Sharing) 설정
      globalcors:
        cors-configurations:
          # '[/**]'는 모든 경로(/)에 이 규칙을 적용한다는 의미입니다.
          '[/**]':
            # ✅ [수정] 프론트엔드 서버의 주소를 허용 목록에 추가합니다.
            allowedOrigins: "http://20.249.154.2"
            # 허용할 HTTP 메소드 목록
            allowedMethods:
              - GET
              - POST
              - PUT
              - PATCH
              - DELETE
              - OPTIONS
            # 허용할 HTTP 헤더 목록 ('*'는 모든 헤더를 허용)
            allowedHeaders: "*"
            # pre-flight 요청 결과를 캐시할 시간 (초 단위)
            maxAge: 3600

      # 라우팅 규칙 정의
      routes:
        # ===================================================
        # 1. 인증/인가 (Auth) 서비스 라우팅
        # ===================================================
        - id: auth-service
          # 목적지: auth-backend-service (Kubernetes 서비스 이름)
          uri: lb://auth-backend-service
          predicates:
            # /api/auth/ 로 시작하는 모든 요청을 이 규칙에 매칭
            - Path=/api/auth/**
          filters:
            # 백엔드로 보내기 전, 경로에서 앞의 2개 세그먼트(/api/auth)를 제거
            # 예: /api/auth/login -> /login
            - StripPrefix=2

        # ===================================================
        # 2. ✅ [수정] 사용자 정보 (User) 서비스 라우팅 분리
        # ===================================================
        # 2-1. 회원가입 등 인증이 필요 없는 User API 경로
        - id: user-public-routes
          uri: lb://user-backend-service
          predicates:
            # ✅ /api/users/register, /api/users/check-email 등 공개 경로만 지정
            - Path=/api/users/register, /api/users/check-email, /api/users/find-id
          filters:
            - StripPrefix=1 # 인증 필터 없음

        # 2-2. 인증이 필요한 User API 경로 (예: 내 정보 조회, 탈퇴 등)
        - id: user-secure-routes
          uri: lb://user-backend-service
          predicates:
            # ✅ /api/users/ 로 시작하는 나머지 모든 경로
            - Path=/api/users/**
          filters:
            # ✅ JWT 인증 필터 적용
            - name: JwtAuthenticationFilter
            - StripPrefix=1

        # ===================================================
        # 3. PPL 생성기 서비스 라우팅
        # ===================================================
        - id: ppl-gen-service
          uri: lb://ppl-gen-backend-service
          predicates:
            - Path=/api/ppl-gen/**
          filters:
            - name: JwtAuthenticationFilter
            - StripPrefix=2

        # ===================================================
        # 4. 굿즈 생성기 서비스 라우팅
        # ===================================================
        - id: goods-gen-service
          uri: lb://goods-gen-backend-service
          predicates:
            - Path=/api/goods-gen/**
          filters:
            - name: JwtAuthenticationFilter
            - StripPrefix=2

        # ===================================================
        # 5. ✅ [신규 추가] 웹툰 대시보드 서비스 라우팅
        # ===================================================
        - id: webtoon-dashboard-service
          # 목적지: webtoon-dashboard-backend-service (Kubernetes 서비스 이름)
          uri: lb://webtoon-dashboard-backend-service
          predicates:
            # /api/webtoon/ 으로 시작하는 모든 요청을 이 규칙에 매칭
            - Path=/api/webtoon-dashboard/**
          filters:
            # JWT 인증이 필요하다면 필터 추가
            - name: JwtAuthenticationFilter
            # 백엔드로 보내기 전, 경로에서 앞의 2개 세그먼트(/api/webtoon)를 제거
            # 예: /api/webtoon/episodes -> /episodes
            - StripPrefix=2

      # 모든 라우팅 규칙에 공통으로 적용될 설정
      default-filters:
        # 커스텀 JWT 인증 필터의 인자(Argument)를 정의합니다.
        # 이 필터는 각 라우트의 filters 목록에 명시적으로 추가될 때만 활성화됩니다.
        - name: JwtAuthenticationFilter
          args:
            # 환경 변수에서 JWT 비밀 키를 가져와 필터에 전달
            secretKey: ${JWT_SECRET}
