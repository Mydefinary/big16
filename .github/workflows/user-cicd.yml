# .github/workflows/user-cicd.yml

name: 'CI/CD for User Service'

on:
  push:
    branches: [ "main", "img-gen-cicd" ] # CI/CD를 적용할 브랜치
    paths:
      # ✅ 아래 경로들에 변경이 있을 때만 워크플로우가 실행됩니다.
      - 'user/**'                     # 1. user 서비스의 소스코드
      - '.github/workflows/user-cicd.yml' # 2. 워크플로우 파일 자체
      - 'all-deployment.yaml'         # 3. 공용 배포 파일

# 워크플로우 전체에서 사용할 환경 변수
env:
  ACR_NAME: "kt16big"
  AKS_CLUSTER_NAME: "kt16big-aks"
  AKS_RESOURCE_GROUP: "kt16big"
  # --- 서비스별 설정 변수 ---
  IMAGE_NAME: "user-backend"                    # ACR에 저장될 Docker 이미지 이름
  WORKING_DIR: "user"                           # Dockerfile이 위치한 소스코드 폴더
  # ✅ [수정] all-deployment.yaml의 이름과 정확히 일치시킵니다.
  DEPLOYMENT_NAME: "user-backend-deployment"
  CONTAINER_NAME: "user-backend-container"      # Deployment YAML 파일에 정의된 컨테이너의 이름
  # ✅ [추가] 배포 매니페스트 파일 경로
  MANIFEST_FILE: "all-deployment.yaml"

jobs:
  build-and-push-to-acr:
    # ✅ user 폴더나 워크플로우 파일이 변경되었을 때만 실행
    if: |
      contains(join(github.event.commits.*.modified, ' '), 'user/') ||
      contains(join(github.event.commits.*.modified, ' '), '.github/workflows/user-cicd.yml')
    runs-on: ubuntu-latest
    steps:
      # ... (기존 빌드 & 푸시 단계는 동일) ...
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.WORKING_DIR }}
          file: ${{ env.WORKING_DIR }}/Dockerfile
          push: true
          tags: |
            ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}

  deploy-to-aks:
    runs-on: ubuntu-latest
    # ✅ build-and-push-to-acr 잡이 성공했거나, all-deployment.yaml 파일만 변경되었을 때 실행
    needs: build-and-push-to-acr
    if: always() # needs 잡이 실패해도 실행되도록 설정
    steps:
      # ... (기존 Azure 로그인, AKS 컨텍스트 설정 단계는 동일) ...

      # ✅ [수정] 이미지를 교체하고 매니페스트를 적용하는 방식으로 변경
      - name: Deploy to AKS
        run: |
          # needs.build-and-push-to-acr.result가 'success'일 때만 이미지 태그를 교체
          if [ "${{ needs.build-and-push-to-acr.result }}" == "success" ]; then
            echo "New image detected. Updating image tag in manifest..."
            # 플레이스홀더를 실제 Git 커밋 해시로 교체
            sed -i "s|${{ env.IMAGE_NAME }}:\${IMAGE_TAG}|${{ env.IMAGE_NAME }}:${{ github.sha }}|g" ${{ env.MANIFEST_FILE }}
          else
            echo "No new image built. Applying manifest as is."
          fi

          # 수정된 매니페스트 파일을 AKS에 적용
          kubectl apply -f ${{ env.MANIFEST_FILE }}
