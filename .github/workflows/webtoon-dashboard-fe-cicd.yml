# .github/workflows/webtoon-dashboard-fe-cicd.yml
name: 'CI/CD for WEBTOON-DASHBOARD Frontend'

on:
  push:
    branches: [ "webtoon-dashboard" ]
    paths:
      - 'webtoon-dashboard/frontend/**'
      - '.github/workflows/webtoon-dashboard-fe-cicd.yml'
      - 'webtoon-dashboard-frontend-deployment.yaml'
  pull_request:
    branches: [ "webtoon-dashboard" ]
    paths:
      - 'webtoon-dashboard/frontend/**'

env:
  ACR_NAME: "kt16big"
  IMAGE_NAME: "webtoon-dashboard-frontend"
  WORKING_DIR: "webtoon-dashboard/frontend"
  AKS_CLUSTER_NAME: "kt16big-aks"
  AKS_RESOURCE_GROUP: "kt16big"
  DEPLOYMENT_NAME: "webtoon-dashboard-frontend-deployment"
  CONTAINER_NAME: "webtoon-dashboard-frontend-container"
  NAMESPACE: "default"
  IMAGE_TAG: "${{ github.sha }}"

jobs:
  build-and-push-to-acr:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: ACR login
        run: az acr login --name $ACR_NAME

      - name: Build & Push
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.WORKING_DIR }}
          file: ${{ env.WORKING_DIR }}/Dockerfile
          push: true
          tags: |
            ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:latest

  deploy-to-aks:
    runs-on: ubuntu-latest
    needs: build-and-push-to-acr
    steps:
      - uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS context
        uses: azure/aks-set-context@v4
        with:
          resource-group: ${{ env.AKS_RESOURCE_GROUP }}
          cluster-name: ${{ env.AKS_CLUSTER_NAME }}

      - name: Ensure resources exist (first-time apply)
        run: |
          set -e
          if ! kubectl get deploy/${{ env.DEPLOYMENT_NAME }} -n ${{ env.NAMESPACE }} >/dev/null 2>&1; then
            echo "Deployment not found. Applying manifests for the first time..."
            sed "s/\${IMAGE_TAG}/${{ env.IMAGE_TAG }}/g" webtoon-dashboard-frontend-deployment.yaml | kubectl apply -n ${{ env.NAMESPACE }} -f -
          else
            echo "Deployment exists. Skipping apply."
          fi

      - name: Set image to new tag
        run: |
          kubectl set image deploy/${{ env.DEPLOYMENT_NAME }} \
            ${{ env.CONTAINER_NAME }}=${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} \
            -n ${{ env.NAMESPACE }}

      - name: Rollout status & brief diagnostics
        run: |
          kubectl rollout status deploy/${{ env.DEPLOYMENT_NAME }} -n ${{ env.NAMESPACE }} --timeout=180s || true
          kubectl get deploy,svc,pod -n ${{ env.NAMESPACE }} -o wide
          POD=$(kubectl get po -l app=webtoon-dashboard-frontend -n ${{ env.NAMESPACE }} -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || true)
          if [ -n "$POD" ]; then
            echo "---- Pod Events ----"; kubectl describe pod/$POD -n ${{ env.NAMESPACE }} | sed -n '/Events:/,$p' || true
          fi
