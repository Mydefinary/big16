# .github/workflows/ppl-gen-be-cicd.yml

name: 'CI/CD for PPL-GEN Backend'

on:
  push:
    branches: [ "img-gen-cicd" ]
    # ppl-gen/BE/ 폴더 내의 파일이 변경되었을 때만 이 워크플로우를 실행합니다.
    paths:
      - 'ppl-gen/backend/**'
      - '.github/workflows/ppl-gen-be-cicd.yml' # 워크플로우 파일 자체가 변경될 때도 실행
  pull_request:
    branches: [ "img-gen-cicd" ]
    paths:
      - 'ppl-gen-react/backend/**'
      - '.github/workflows/ppl-gen-be-cicd.yml'

# 환경 변수 설정
env:
  ACR_NAME: "kt16big" # 예: myacr (login server 아님)
  IMAGE_NAME: "ppl-gen-backend"
  WORKING_DIR: "ppl-gen-react/backend"
  AKS_CLUSTER_NAME: "kt16big-aks"
  AKS_RESOURCE_GROUP: "kt16big"

jobs:
  build-and-push-to-acr:
    runs-on: ubuntu-latest
    steps:
      # 1. 리포지토리 코드 가져오기
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Azure에 로그인 (GitHub Secret 사용)
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # 3. Azure Container Registry(ACR)에 로그인
      - name: Log in to ACR
        run: az acr login --name ${{ env.ACR_NAME }}

      # 4. Docker 이미지 빌드 및 ACR에 푸시
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.WORKING_DIR }} # Dockerfile이 있는 위치
          file: ${{ env.WORKING_DIR }}/Dockerfile # Dockerfile 경로
          push: true # ACR에 푸시
          tags: |
            ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:latest

# ... (build-and-push-to-acr 잡은 그대로 둠) ...

  deploy-to-aks:
    runs-on: ubuntu-latest
    # build-and-push-to-acr 잡이 성공해야만 실행됨
    needs: build-and-push-to-acr
    steps:
      # 1. Azure에 로그인
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # 2. AKS 클러스터에 연결 설정
      - name: Set AKS context
        uses: azure/aks-set-context@v3
        with:
          # 위 env에 설정한 값으로 자동 삽입
          resource-group: ${{ env.AKS_RESOURCE_GROUP }}
          cluster-name: ${{ env.AKS_CLUSTER_NAME }}

      # 3. kubectl을 사용하여 배포된 이미지 업데이트
      - name: Deploy to AKS
        run: |
          kubectl set image deployment/ppl-gen-backend-deployment \
            ppl-gen-backend-container=${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
