# .github/workflows/gateway-cicd.yml

name: 'CI/CD for Gateway Service'

on:
  push:
    branches: [ "login-ok" ]
    paths:
      - 'gateway/**'
      - '.github/workflows/gateway-cicd.yml'
      - 'deployment/gateway-deployment.yaml'

env:
  ACR_NAME: "kt16big"
  AKS_CLUSTER_NAME: "kt16big-aks"
  AKS_RESOURCE_GROUP: "kt16big"
  IMAGE_NAME: "gateway-hoa"
  WORKING_DIR: "gateway"
  DEPLOYMENT_NAME: "gateway-deployment-hoa"
  CONTAINER_NAME: "gateway-container-hoa"

jobs:
  # ✅ 새로운 빌드 테스트 단계 추가
  test-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      # ✅ Java 11 설정
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven
      
      # ✅ Maven 의존성 캐시
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      
      # ✅ 환경 확인 및 컴파일 테스트
      - name: Verify build environment
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          echo "=== Environment Check ==="
          java -version
          mvn -version
          echo "=== Testing Maven Build ==="
          mvn clean compile -DskipTests -B
      
      # ✅ 의존성 문제 사전 체크
      - name: Resolve dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          mvn dependency:resolve -B
          mvn dependency:tree

  build-and-push-to-acr:
    needs: test-build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Log in to ACR
        run: az acr login --name ${{ env.ACR_NAME }}
      
      # ✅ Docker Buildx 설정
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      # ✅ 향상된 Docker 빌드
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.WORKING_DIR }}
          file: ${{ env.WORKING_DIR }}/Dockerfile
          push: true
          tags: |
            ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:latest
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  deploy-to-aks:
    needs: build-and-push-to-acr
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Set AKS context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ env.AKS_RESOURCE_GROUP }}
          cluster-name: ${{ env.AKS_CLUSTER_NAME }}

      # ✅ 배포 전 상태 확인
      - name: Check current deployment status
        run: |
          echo "=== Current Deployment Status ==="
          kubectl get pods -l app=gateway-hoa || echo "No existing pods found"
          kubectl get deployment ${{ env.DEPLOYMENT_NAME }} || echo "No existing deployment found"

      # ✅ 이미지 태그 업데이트 (deployment.yaml에서 $latest 대체)
      - name: Update deployment with new image tag
        run: |
          echo "=== Updating deployment.yaml with new image tag ==="
          sed -i 's|$latest|${{ github.sha }}|g' deployment/gateway-deployment.yaml
          cat deployment/gateway-deployment.yaml | grep "image:"

      # ✅ Kubernetes 매니페스트 적용
      - name: Apply Kubernetes manifest
        run: |
          echo "=== Applying Kubernetes manifests ==="
          kubectl apply -f deployment/gateway-deployment.yaml
          
          # 배포 상태 확인
          kubectl rollout status deployment/${{ env.DEPLOYMENT_NAME }} --timeout=300s

      # ✅ 이미지 업데이트 확실히 하기 (이중 보장)
      - name: Ensure latest image deployment
        run: |
          echo "=== Ensuring latest image deployment ==="
          kubectl set image deployment/${{ env.DEPLOYMENT_NAME }} \
            ${{ env.CONTAINER_NAME }}=${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
          
          # 롤아웃 완료 대기
          kubectl rollout status deployment/${{ env.DEPLOYMENT_NAME }} --timeout=600s

      # ✅ 헬스체크 및 배포 검증
      - name: Verify deployment
        run: |
          echo "=== Deployment Verification ==="
          
          # Pod 상태 확인
          kubectl wait --for=condition=ready pod -l app=gateway-hoa --timeout=300s
          
          # 최종 상태 확인
          echo "=== Final Deployment Status ==="
          kubectl get pods -l app=gateway-hoa
          kubectl get services -l app=gateway-hoa
          
          # 로그 확인 (최근 30줄)
          echo "=== Recent Application Logs ==="
          kubectl logs deployment/${{ env.DEPLOYMENT_NAME }} --tail=30 || true

      # ✅ 서비스 연결 상태 확인
      - name: Check service connectivity
        run: |
          echo "=== Service Connectivity Check ==="
          kubectl describe service gateway-service-hoa || true
          
          # ConfigMap 존재 확인
          echo "=== ConfigMap Status ==="
          kubectl get configmap gateway-config || echo "Warning: gateway-config ConfigMap not found"

      # ✅ 배포 실패 시 롤백
      - name: Rollback on failure
        if: failure()
        run: |
          echo "=== Rolling back deployment ==="
          kubectl rollout undo deployment/${{ env.DEPLOYMENT_NAME }}
          kubectl rollout status deployment/${{ env.DEPLOYMENT_NAME }} --timeout=300s
          
          echo "=== Rollback completed, checking status ==="
          kubectl get pods -l app=gateway-hoa