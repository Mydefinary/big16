# 워크플로우 이름
name: 'CI/CD for Gateway Service'

on:
  push:
    branches: [ "login-cicd" ] # CI/CD를 적용할 브랜치
    paths:
      - 'gateway/**'                    # 1. 게이트웨이 서비스의 소스코드 경로
      - '.github/workflows/gateway-cicd.yml' # 2. 워크플로우 파일 자신
      - 'all-deployment.yaml'         # 3. 공용 배포 파일

# 워크플로우 전체에서 사용할 환경 변수
env:
  ACR_NAME: "kt16big"
  AKS_CLUSTER_NAME: "kt16big-aks"
  AKS_RESOURCE_GROUP: "kt16big"
  # --- 서비스별로 이 부분만 수정 ---
  IMAGE_NAME: "gateway"
  WORKING_DIR: "gateway"
  DEPLOYMENT_NAME: "gateway-deployment"
  MANIFEST_FILE: "all-deployment.yaml"

jobs:
  build-and-push-to-acr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Log in to ACR
        run: az acr login --name ${{ env.ACR_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.WORKING_DIR }}
          file: ${{ env.WORKING_DIR }}/Dockerfile
          push: true
          tags: |
            ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}

  deploy-to-aks:
    needs: build-and-push-to-acr
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ env.AKS_RESOURCE_GROUP }}
          cluster-name: ${{ env.AKS_CLUSTER_NAME }}

      - name: Deploy to AKS
        run: |
          if [ "${{ needs.build-and-push-to-acr.result }}" == "success" ]; then
            echo "New image detected. Updating image tag in manifest..."
            sed -i "s|${{ env.IMAGE_NAME }}:\${IMAGE_TAG}|${{ env.IMAGE_NAME }}:${{ github.sha }}|g" ${{ env.MANIFEST_FILE }}
          else
            echo "No new image built. Applying manifest as is."
          fi
          kubectl apply -f ${{ env.MANIFEST_FILE }}
